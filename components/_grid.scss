// _grid.scss generates classes that provide convenient and flexible way to create
// responsive page layout.

// Define Default Variables
// --------------------------------------------------
// Grid Partitioning
$grid-media:      $_media !default;
$grid-media-unit: $_media-unit !default;

// Grid Parameters
// (!) float grid type may deprecated and deleted in the future
$grid-type:       flexbox !default; // flexbox, float
$grid-row-modes:  gutter, columned !default; // gutter, columned
$grid-params:     calc-grid(12, gap, 1.5%) !default;
$grid-media-params: (
  default: $grid-params,
  laptop: $grid-params,
  tablet: $grid-params,
  mobile: $grid-params,
) !default;

// Grid Composition
$grid-set: (
  default: columns offsets pushes pulles,
  laptop: columns offsets pushes pulles,
  tablet: columns offsets pushes pulles,
  mobile: columns offsets pushes pulles,
) !default;

// Define Handy Mixin
// --------------------------------------------------
// grid
// generates CSS styles for different grid element types.
// $params - contains 3 grid parameters: 1:columns number, 2:column width, 3:gap width.
// $params should be generated by calc-grid() function. $element - name of grid element
// type whose styles represent its behaviour. Type names start with _ initialize base
// styles and should be used only once. Other types can be used many times under @media rule.
@mixin grid($element, $params:null, $i:1, $type: $grid-type) {
  $column-width: null;
  $gap-width: null;
  $columns: null;
  // if params are presented
  @if length($params) == 3 {
    $columns:       nth($params, 1);
    $column-width:  nth($params, 2);
    $gap-width:     nth($params, 3);
  }

  // Row Types
  // --------------------
  @if $element==_row {
    @if index($type, flexbox) {
      display: flex;
      padding: 0;
      box-sizing: border-box;
      flex-wrap: if($_left == left, wrap, wrap-reverse);
    } @else if index($type, float) {
      display: block;
      padding: 0;
      box-sizing: border-box;
      @include clearfix();
    }
  }
  @else if $element==row-gutter {
    margin-#{$_left}: -$gap-width * 2;
  }

  // Column Types
  // --------------------
  @else if $element==_column {
    @if index($type, flexbox) {
      display: flex;
      box-sizing: border-box;
      flex-direction: column; // full width of elements inside
      flex:0 1 auto; // no folding on empty column
      min-height:1px; // no folding on empty column
    } @else if index($type, float) {
      float: $_left;
      display: block;
      box-sizing: border-box;
      min-height:1px; // no folding on empty column
    }
  }
  @else if $element==column-width {
    @if index($type, flexbox) {
      flex-basis: if($i==0, auto, $column-width * $i);
      max-width: if($i==0, none, $column-width * $i);
    } @else if index($type, float) {
      width: if($i==0, auto, $column-width * $i);
    }
  }
  @else if $element==column-gutter {
    padding-#{$_left}: $gap-width * 2;
  }

  // Column Manipulators
  // ---------------------
  @else if $element==column-offset {
    margin-#{$_left}: $column-width * $i;
  }
  @else if $element==column-unoffset {
    margin-#{$_left}: 0;
    margin-#{$_right}: 0;
  }
  @else if $element==column-push {
    #{$_left}: $column-width * $i;
    #{$_right}: auto;
  }
  @else if $element==column-pull {
    #{$_right}: $column-width * $i;
    #{$_left}: auto;
  }
  @else if $element==column-unpush or $element==column-unpull {
    left:auto;
    right:auto;
  }
  @else if $element==column-centred-x {
    margin-#{$_left}: auto;
    margin-#{$_right}: auto;
    @if index($type, float) {
      float: none;
    }
  }
  @else if $element==column-uncentred-x {
    margin-#{$_left}: 0;
    margin-#{$_right}: 0;
    @if index($type, float) {
      float: $_left;
    }
  }
  @else if $element==column-centred-y {
    @if index($type, flexbox) {
      align-self: center;
    }
  }
  @else if $element==column-uncentred-y {
    @if index($type, flexbox) {
      align-self: auto;
    }
  }
}

// Render Styles
// --------------------------------------------------
// Conventions:
//  - grid system classes start with _ (underscore), class names inspired by future
//    CSS Grid Layout Module: www.w3.org/TR/2015/WD-css-grid-1-20150317.
//  - $_name variables aggregates selectors, used to avoid duplicate styles (DRYCSS)

// Initialise Classes
// -------------------------
// Row
._row { @include grid(_row); }
// Row Gutter Mode - defines gutters between columns
@if index($grid-row-modes, gutter) {
  ._gutter { position: relative; }
}
// Row Float Mode (?)
@if index($grid-type, float) {
  ._row._reverse [class*="_col-"] { float: right; }
  ._row._column [class*="_col-"]  { clear: both; }
}

// Column
$_column: unquote('[class*="_col-"]');
// Columned Row Mode - automatically breaks child tags on columns
@if index($grid-row-modes, columned) {
  $_column: append($_column, unquote('[class*="_cols-"] > *'), comma);
  [class*="_cols-"] { list-style:none; }
}
// render
#{$_column} { @include grid(_column); }

// Initialise @media Classes
// -------------------------
// get @media query names from $_media
$grid-media-names: nths(map-keys($_media), indexes(map-keys($_media), map-keys($grid-set)));

// go through each @media query
@for $i from 1 through length($grid-media-names) {
  $media-name:   nth($grid-media-names, $i);
  $media-params: map-get($grid-media-params, $media-name);
  $prefix: __($media-name, '_', $ifException:'_');

  @include media($media-name, $grid-media, $grid-media-unit) {
    // Gutter Mode
    // --------------------
    @if index($grid-row-modes, gutter) {
      // For Row
      ._gutter { @include grid(row-gutter, $media-params); }
      // For Column
      $_column-gutter: unquote('._gutter [class*="_col-"]');
      // For Columned Row
      @if index($grid-row-modes, columned) {
        $_column-gutter: append($_column-gutter, unquote('._gutter[class*="_cols-"] > *'), comma);
      }
      // render
      #{$_column-gutter} { @include grid(column-gutter, $media-params); }
    }

    // Columns
    // --------------------
    @if index(map-get($grid-set, $media-name), columns) {
      // Column Width
      @for $i from 0 through nth($media-params, 1) {
        // columns with 0 index have auto width, hence have postfix 'auto'
        $idx: if($i == 0, 'auto', $i);
        // For Column
        $_column-width: unquote('.#{$prefix}col-#{$idx}');
        // For Columned Row
        @if index($grid-row-modes, columned) {
          $_column-width: append($_column-width, unquote('.#{$prefix}cols-#{$idx} > *'), comma);
        }
        // render
        #{$_column-width} { @include grid(column-width, $media-params, $i); }
      }

      // Column Centering
      // centering
      .#{$prefix}center-x { @include grid(column-centred-x); }
      .#{$prefix}center-y { @include grid(column-centred-y); }

      // uncentering
      .#{$prefix}uncenter-x { @include grid(column-uncentred-x); }
      .#{$prefix}uncenter-y { @include grid(column-uncentred-y); }
    }

    // Offsets
    // --------------------
    @if index(map-get($grid-set, $media-name), offsets) {
      @for $i from 1 through nth($media-params, 1) {
        .#{$prefix}offs-#{$i} { @include grid(column-offset, $media-params, $i); }
      }
      .#{$prefix}unoffs { @include grid(column-unoffset); }
    }

    // Push
    // --------------------
    @if index(map-get($grid-set, $media-name), pushes) {
      [class*="_push-"] { position: relative; }
      @for $i from 1 through nth($media-params, 1) {
        .#{$prefix}push-#{$i} { @include grid(column-push, $media-params, $i); }
      }
      .#{$prefix}unpush { @include grid(column-unpush); }
    }

    // Pull
    // --------------------
    @if index(map-get($grid-set, $media-name), pulls) {
      [class*="_pull-"] { position: relative; }
      @for $i from 1 through nth($media-params, 1) {
        .#{$prefix}pull-#{$i} { @include grid(column-pull, $media-params, $i); }
      }
      .#{$prefix}unpull { @include grid(column-unpull); }
    }
  }
}
