// Clearfix
// --------------------------------------------------
// clearfix - is technique of overflow correction
// to block element containing float elements
@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}
@mixin _clearfix() {
  &::before,
  &::after {
     content: " ";
     display: table;
  }
  &::after {
     clear: both;
  }
}


// Font-Face
// --------------------------------------------------
// Generate bulletproof @font-face rule for your custom fonts.
@mixin font-face($font-family, $font-path, $font-weight: null, $font-style:null, $version:null, $svg-font-name:null) {
  $query: if($version,'?v=#{$version}', null);
  $add-query: if($version,'&v=#{$version}', null);
  @font-face {
    font-family: $font-family;
    font-weight: $font-weight;
    font-style: $font-style;
    src: url('#{$font-path}.eot#{$query}');
    src: url('#{$font-path}.eot?#iefix#{$add-query}') format('embedded-opentype'),
    url('#{$font-path}.woff#{$query}') format('woff'),
    url('#{$font-path}.ttf#{$query}') format('truetype')
    // add path to svg font if presented
    if($svg-font-name, unquote(",url('#{$font-path}.svg#{$query}##{$svg-font-name}') format('svg')"), null);
  }
}


// Functions implementing Element's base functionality
// --------------------------------------------------
// Index getter
// ------------------------------
// returns list positions of a values in $list-1 that exists in $list-2
@function indexes($list-1, $list-2) {
  $output: ();

  @each $value-of-2 in $list-2 {
    $output: append($output, index($list-1, $value-of-2));
  }

  @return $output;
}

// Nth getter
// ------------------------------
// returns list with items from $list by indexes
@function nths($list, $indexes) {
  $output: ();

  @each $index in $indexes {
    @if $index {
      $output: append($output, nth($list, $index));
    }
  }

  @return $output;
}

// Dash Appender & Prepender (with validation)
// ------------------------------
// _() - appends dash for given $value if $value isn't equal to $exception
// dash can be replaced by any other character by $postfix
@function _($value:null, $exception:default, $dash: '-') {
  @return if($value!=$exception, if($value, unquote('#{$value}#{$dash}'), null), null);
}
// __() - prepend dash like the previous
@function __($value:null, $exception:default, $dash: '-') {
  @return if($value!=$exception, if($value, unquote('#{$dash}#{$value}'), null), null);
}

// Exclude item list by value name
// ------------------------------
@function remove-value($list, $value:null, $separator:auto)
{
  $output: ();
  //  @if $value {
  @each $val-of-first in $list {
    @if $val-of-first != $value {
      $output: append($output, $val-of-first, $separator);
    }
  }

  @return $output;
  //  }
  //  @else {
  //    @return $list;
  //  }
}

// Remove item list by index 
// ------------------------------
@function remove($list, $index:null, $separator:auto)
{
  $output: ();
  @if $index {
    @each $val-of-first in $list {
      @if $val-of-first != $index {
        $output: append($output, $val-of-first, $separator);
      }
    }

    @return $output;
  }
  @else {
    @return $list;
  }
}

// Check if word exists in the string
// ---------------------------------
// @return null if word doesn't exists else return 1
// or index of char (if length of word == 1)
@function str-exists($string, $word) {
  $word-length: str-length($word);

  @if $word-length <= str-length($string) {
    @if $word-length > 1 {
      $next: 0;
      @for $i from 1 through $word-length {
        $letter: str-slice($word, $i, $i);

        $curr: str-index($string, $letter);
        @if $curr == null {
          @return null;
        }

        @if $i > 1 and $next - $curr != -1 {
          @return null;
        }

        $next: str-index($string, $letter);
        @if $next == null {
          @return null;
        }

      }
      @return true;
    }

    @else if $word-length == 1 {
      @return str-index($string, $word);

    } @else {
      @return null;
    }
  }

  @return null;
}

// Functions implementing Element's base functionality
// --------------------------------------------------
// Unit Remover
// -------------------------
@function ununit($value) {
  @if unitless($value)              { @return $value; }
  @else if unit($value) == '%'      { @return $value / 1%; }
  @else if unit($value) == 'px'     { @return $value / 1px; }
  @else if unit($value) == 'pt'     { @return $value / 1pt; }
  @else if unit($value) == 'em'     { @return $value / 1em; }
  @else if unit($value) == 'rem'    { @return $value / 1rem; }
}

// Unit Appender
// -------------------------
@function setunit($value, $unit: integer) {
  @if $unit == integer              { @return ununit($value); }
  @else if $unit == '%'             { @return ununit($value)+0%; }
  @else if $unit == 'px'            { @return ununit($value)+0px; }
  @else if $unit == 'pt'            { @return ununit($value)+0pt; }
  @else if $unit == 'em'            { @return ununit($value)+0em; }
  @else if $unit == 'rem'           { @return ununit($value)+0rem; }
}

// Unit Converter (without rounding)
// -------------------------
// $value numeral - any CSS unit or unitless value: 100px, 1.4rem, 1.6, 7pt etc
// $unit unit - any valid CSS unit: rem, '%', '' (unitless), px, em, auto (auto detection) etc
@function _tounit($value, $unit: null, $pixel-size: 16, $ppi-ratio: 72/96) {
  @if $unit == 'auto' {
    $unit: unit($value)
  }

  @if $unit {
    // px
    @if unit($value) == 'px' {
      @if $unit == 'px'             { @return $value; }
      @else if $unit == '%'         { @return setunit($value * 100 / $pixel-size, '%'); }
      @else if $unit == 'pt'        { @return setunit($value * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit($value / $pixel-size, rem); }
      @else if $unit == ''          { @return setunit($value / $pixel-size); }
    }

    // percent
    @else if unit($value) == '%' {
      $value: round($value * $pixel-size/100) / ($pixel-size/100);
      @if $unit == '%'              { @return $value; }
      @else if $unit == 'px'        { @return setunit($value * $pixel-size/100, px); }
      @else if $unit == 'pt'        { @return setunit($value * $pixel-size/100 * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value / 100, em); }
      @else if $unit == 'rem'       { @return setunit($value / 100, rem); }
      @else if $unit == ''          { @return setunit($value / 100); }
    }

    // em, rem, unitless
    @else if unit($value) == 'em' or unit($value) == 'rem' or unitless($value) {
      @if $unit == '%'              { @return setunit(ununit($value) * 100, '%'); }
      @else if $unit == 'px'        { @return setunit($value * $pixel-size, px); } //round?
      @else if $unit == 'pt'        { @return setunit(ununit($value) * $pixel-size * $ppi-ratio, pt); }
      @else if $unit == 'em'        { @return setunit($value, em); }
      @else if $unit == 'rem'       { @return setunit($value, rem); }
      @else if $unit == ''          { @return setunit($value); }
    }

    // pt
    @else if unit($value) == 'pt' {
      @if $unit == '%'              { @return setunit(ununit($value) / $ppi-ratio * 100/ununit($pixel-size), '%'); }
      @else if $unit == 'px'        { @return setunit(round($value / $ppi-ratio), px); }
      @else if $unit == 'pt'        { @return $value; }
      @else if $unit == 'em'        { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, em); }
      @else if $unit == 'rem'       { @return setunit(ununit($value) / $ppi-ratio / $pixel-size, rem); }
      @else if $unit == ''          { @return setunit(ununit($value) / $ppi-ratio / $pixel-size); }
    }

    // if unit is not detected just return
    @else {
      @return $value;
    }
  }
  // if $unit is not defined just return
  @else {
    @return $value;
  }
}

// Unit Converter (with rounding)
// ------------------------------
// Converts input $value to given $unit so that returned value
// become integer pixel at the end of browser rendering
@function tounit($value, $unit: auto) {
  @if $unit == 'auto' {
    @return _tounit(round(_tounit($value, px)), unit($value));
  } @else {
    @return _tounit(round(_tounit($value, px)), $unit);
  }
}


// Grid Settings Calculator
// --------------------------------------------------
// $columns - number of grid columns
// $calc-method - method based on what will be made calculation
// $calc-data - input data for calculation according to selected method
// @return list - 1:columns number, 2:column width, 3:gap width
@function calc-grid($columns, $calc-method, $calc-data)
{
  $column: null;
  $gap: null;

  // gaps by padding
  @if $calc-method==column-gap {
    $px-column: nth($calc-data,1);
    $px-gap: nth($calc-data,2);
    $px-row: ($columns * $px-column) + ($px-gap * ($columns - 1));
    $percent-gap: percentage($px-gap/$px-row);

    $column: 100% / $columns;
    $gap: $percent-gap/2;
  }
  @else if $calc-method==gap {
    $gap: $calc-data;

    $column: 100% / $columns;
    $gap: $gap/2;
  }
  @else if $calc-method==column {
    $ratio: $calc-data;

    $column: 100% / $columns;
    $gap: (100% - ($ratio * $columns)) / $columns;
  }

  @return ($columns, $column, $gap);
}


// Media Builder
// --------------------------------------------------
// $media-map map - map where key is name of query, value is the query itself. Example:
//    $media-map: (
//       mobile:   media '(screen and (max-width: 740px )',
//       touch:    '.touch',
//       ^name     ^query
//    );
// $media-name string - key of corresponding key-value pair in $media-map. Example: mobile or touch
// $unit unit - convert numbers are presented in query in accordance with $unit
@mixin media($media-name, $media-map:$_media, $unit:$_media-unit) {
  // if media map is not null
  @if $media-map {
    // get query with the associated name
    $media-query: map-get($media-map, $media-name);

    // if query is presented in the map
    @if $media-query {
      $query-string: ();
      $query-type: null;

      // fetch query string from key's value
      @for $i from 1 through length($media-query) {
        $value: nth($media-query, $i);
        // if first item of query is 'media' keyword the content must be under @media rule
        // else under simple CSS selector, like .myclass {@content;}
        @if $i == 1 {
          $query-type: if($value==media, media, selector);
        }

        // if one of the query item is number - convert it according to $unit unit
        $value: if(type-of($value)==number, tounit($value, $unit), unquote($value));

        // fetch query string
        $query-string: append($query-string, if($value!=media, $value, null));
      }

      @if $query-type == media {
        @media #{$query-string} {@content;}
      }
      @else if $query-type == selector{
        // selector & {@content} (deprecated?)
        #{$query-string} {@content;}
      }

    // render content with no query
    } @else {
      @content;
    }
  }

}


// Underlying function and mixins implementing set()
// --------------------------------------------------
// _split-set-data() gets selector type(s) identifiers from second item of $data ('%' or '.')
// '%' = placeholder, generate no content (need only for @extend operator)
// '.' = class, default behaviour generate common selectors
@function _split-set-data($data, $type) {
  // return property name(s), always comes first
  @if $type == property-name {
    @return nth($data, 1);
  }

  // get selector type(s) near after $property-name
  $selector-type: ();
  $i: 1; $types: nth($data, 2);
  @while ($i <= 2 and $i <= length($types)) and (nth($types, $i) == '%' or nth($types, $i) == '.') {
    $selector-type: append($selector-type, nth($types, $i));
    $i: $i + 1;
  }

  // get set values
  $set-values: ();
  // if selector type(s) detected
  @if length($selector-type) > 0 {
    // get after $selector-type
    $set-values: nth($data, 3);
  } @else {
    // get after $property-name
    $set-values: nth($data, 2);
  }

  // return according to $type
  @if $type == selector-type {
    @return $selector-type;
  } @else { // set-values
    @return $set-values;
  }
}
// $property-shortcut string - class prefix for for given CSS property
// $data list - list contains class name and CSS value pairs.
// @render one or more statements like: selector {property: value;}
@mixin _set($property-shortcut, $data, $media-name:null) {
  // initialize vars of constructor, see example at the end of the mixin
  // -------
  // vars above change during loop
  $media-prefix: null;
  $media-postfix: null;
  $class-prefix: null;
  $class-postfix: null;
  $selector-before: (null);
  $selector-after: (null);
  // vars above are constant
  $property-name: _split-set-data($data, property-name);
  $selector-type: _split-set-data($data, selector-type);
  $set-values: _split-set-data($data, set-values);

  $i: 1; // offset
  @while $i <= length($set-values) {
    // set cursor of the loop
    $current: nth($set-values, $i);

    // step _
    // --------
    // prepend/append/clean media query name
    @if $current == prefix {
      $media-prefix:_($media-name);
      $media-postfix:null;
      $i: $i + 1;
    }
    @if $current == postfix {
      $media-prefix:null;
      $media-postfix:__($media-name);
      $i: $i + 1;
    }
    @else if $current == unfix {
      $media-prefix:null;
      $media-postfix:null;
      $i: $i + 1;
    }

    // step 0
    // ------
    // get selectors if presented
    $current: nth($set-values, $i);
    @if length($current) == 3 {
      $selector-before: nth($current, 1);
      $selector-after: nth($current, 3);
      $i: $i + 1;
    }

    // step 1
    // ------
    // get class name
    $current: nth($set-values, $i);
    $i: $i + 1;

    // if pre/postfix class names are presented
    @if length($current) == 2 {
      $class-prefix: #{nth($current, 1)}_;
      $class-postfix: nth($current, 2);
    }
    // if there is only class postfix
    @else {
      $class-prefix: null; // reset prefix
      $class-postfix: $current;
    }

    // step 2
    // ------
    // get property value
    $current: nth($set-values, $i);
    $i: $i + 1;

    // append null for correct handling values within the loop
    $property-value: $current, null;

    // step 3
    // ------
    // construct selector
    $class-shortcut: if($property-shortcut!=null and $class-postfix!=null, '#{$property-shortcut}-', $property-shortcut);
    @for $i from 1 through length($selector-type) {
      @if $i > 0 {
        // set type by default
        $type: '.';

        // get specific type if presented
        @if length($selector-type) > 0 {
          $type: nth($selector-type, $i);
        }

        // construct
        $selector:
          #{$selector-before}#{$type}#{$media-prefix}#{$class-prefix}#{$class-shortcut}#{$class-postfix}#{$media-postfix}#{$selector-after};
        // [any CSS selector]+[. / %]+[   laptop-   ]+[  myprefix-  ]+[    border-    ]+[  -black-thin ]+[   -laptop    ]+[any CSS selector]
        // notes: constructor use either $media-prefix or $media-postfix, but not both at once

        // render
        #{$selector} {
          $value: $property-value;
          // if set has several CSS properties at once specify the same value for all of them
          @each $property in $property-name {
            #{$property}: $value;
          }
        }
      }
    }

  }
}
// Place _set() mixin under specified media query
@mixin _media-set($property-shortcut, $property-name, $set-media-names, $set-media-values, $media-map, $media-unit) {
  @for $i from 1 through length($set-media-names) {
    $media-name: nth($set-media-names, $i);
    @include media($media-name, $media-map, $media-unit) {
      @include _set($property-shortcut, append($property-name, $set-media-values), $media-name);
    }
  }
}

// Set Generator - key mixin of framework
// --------------------------------------------------
// $property-shortcut string - pass to _set() mixin (see above)
// $data list/map - mixed data, can contain CSS property name, selector types, set values etc
// $media-map map - map where key = name of media, value = media query
// @render set of classes and/or placeholders
@mixin set($property-shortcut, $data, $media-map:null, $media-unit:$_media-unit) {
  @if $media-map {
    // get all available media query names
    $media-names: map-keys($media-map);

    // get constants see _split-set-data
    $property-name: append((), _split-set-data($data, property-name));
    $selector-type: _split-set-data($data, selector-type);
    $set-values: _split-set-data($data, set-values);

    // merge selector type(s) and property-name into one list
    @if length($selector-type) >= 1 {
      $property-name: append($property-name, $selector-type);
    }


    @each $key, $val in $set-values {
      // keyword 'all'
      // -------------
      @if $key == all {
        // after 'all' key must immediately follow set-values
        $set-values: $val;
        @include _media-set($property-shortcut, $property-name, $media-names, $set-values, $media-map, $media-unit);
      }

      // keyword 'media'
      // --------------
      @else if str-exists($key, media) {
        // generate $set-values under all media except default
        @if nth($val, 1) == all {
          // pass $media-names excluding default media
          $media-names: remove-value($media-names, default);
          // pass $set-values excluding all keyword
          $set-values: nth($val, 2);
          @include _media-set($property-shortcut, $property-name, $media-names, $set-values, $media-map, $media-unit);
        }

        // generate $set-values under manually specified media
        @else {
          // get media names from first item of list
          $media-names: nth($val, 1);
          // pass $set-values excluding media names
          $set-values: nth($val, 2);
          @include _media-set($property-shortcut, $property-name, $media-names, $set-values, $media-map, $media-unit);
        }
      }

      // no keywords
      // -------------
      // generate $set-values under one media specified by $key
      @else {
        $media-name: $key;
        $set-values: $val;
        @include _media-set($property-shortcut, $property-name, $media-name, $set-values, $media-map, $media-unit);
      }
    }
  }
  // there is no media just pass
  @else {
    @include _set($property-shortcut, $data);
  }
}

// --------------------------------------------------

// Get Value from Set
// @todo complete
@function get($mixed-list, $class-name) {
  $property-list: nth($mixed-list, 1); //list with property name
  $property-list: nth($property-list, 2); //list without property name
  $property-device: nth($mixed-list, 2);

  $list: if($property-device and $property-device != _, map-get($property-list, $property-device), $property-list);

  $i: 1;
  @while $i <= length($list) {

    $initial-value: nth($list, $i);
    // step _
    // --------
    // prepend/append/clean device name
    @if $initial-value == prefix {
      $i: $i + 1;
    }
    @if $initial-value == postfix {
      $i: $i + 1;
    }
    @else if $initial-value == unfix {
      $i: $i + 1;
    }

    // step 0
    // ------
    // get selectors if presented
    $first-value: nth($list, $i);
    @if length($first-value) == 3 {
      $i: $i + 1;
    }

    // step 1
    // ------
    // get class name
    $class-value: nth($list, $i);
    $i: $i + 1;

    // step 2
    // ------
    // get property value
    $property-value: nth($list, $i);
    $i: $i + 1;

    // step 3
    // ------
    // return property and value
    @if $class-value == $class-name {
      @return $property-value;
    }
  }
  @return null;
}


// Get Property and Value from Set
// @todo complete
@mixin get($args...) {
  $i: 1;
  @while $i <= length($args) {
    //get property name, list value, etc
    $mixed-list: nth($args, $i);
    $property-list: nth($mixed-list, 1);
    $property-name: nth($property-list, 1);

    //get class name for searching value
    $class-name: nth($args, $i + 1);

    //output CSS property
    #{$property-name}: get($mixed-list, $class-name);

    $i: $i + 2;
  }
}
