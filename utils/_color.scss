// color.scss description

// shade
// darkens the $color by mixing it with black in amount of $percentage.
//    shade(#f2f2f2, 50%) -> #797979
//    shade(#f2f2f2, 50)  -> #797979
//    shade(white, 100%)  -> black
//    shade(red, 45)  -> #8c0000
//  NOTE: don't matter to write with percentage or without
@function shade($color, $percentage) {
  $black: rgb(0, 0, 0);
  @return mix($black, $color, $percentage);
}

// tint
// lightens the $color by mixing it with white in amount of $percentage.
//    tint(black, 80)     -> #cccccc
//    tint(#4c0508, 80)   -> #b79b9c
//    tint(#e2d7d7, 80)   -> #f3efef
//    tint(#000074, 100)  -> white
@function tint($color, $percentage) {
  $black: rgb(255, 255, 255);
  @return mix($black, $color, $percentage);
}

// convert-color
// converts one color model into another. $color can be any of hex, rgb(a), hsl(a), hsv(a), keyword color model
//    convert-color(#6082b6, rgb)             -> rgb(96, 130, 182)
//    convert-color(hsl(120, 100%, 50%), hsv) -> 120 100% 100%
//    convert-color(120 100% 100%, hex)       -> lime
//    convert-color(rgba(0, 255, 0, 1), hsv)  -> 120 100% 100%
// http://ariya.blogspot.com/2008/07/converting-between-hsl-and-hsv.html
@function convert-color($color, $model) {
  // if $color is list (hence hsv(a)) convert it to type of color
  @if type-of($color) == list and length($color) >= 3 {
    $hsv-h: nth($color, 1);
    $hsv-s: nth($color, 2) / 100;
    $hsv-v: nth($color, 3) / 100;
    $l: (2 - $hsv-s) * $hsv-v;
    $s: $hsv-s * $hsv-v / if($l <= 1, $l, 2 - $l);

    $l: limit($l * 100 / 2, 0, 100);
    $s: if($s == Infinity, 0, limit($s * 100, 0, 100));

    @if length($color) == 4 {
      $color: hsla($hsv-h, $s, $l, nth($color, 4));
    } @else {
      $color: hsl($hsv-h, $s, $l);
    }
  }
  @if type-of($color) == color {
    @if $model == hex {
      // sass automaticaly converts rgb into hex
      @return rgb(red($color), green($color), blue($color));
    } @else if $model == rgb {
      @return unquote("rgb(#{round(red($color))}, #{round(green($color))}, #{round(blue($color))})");
    } @else if $model == rgba {
      @return rgba(red($color), green($color), blue($color), alpha($color));
    } @else if $model == hsl {
      @return unquote("hsl(#{ununit(hue($color))}, #{saturation($color)}, #{lightness($color)})");
    } @else if $model == hsla {


      @return unquote("hsla(#{ununit(hue($color))}, #{saturation($color)}, #{lightness($color)}, #{alpha($color)})");
    } @else if $model == hsv or $model == hsva or $model == hsb or $model == hsba {
      $h: ununit(hue($color));                                      // set the final hue
      $l: ununit(lightness($color))/100 * 2;                        // prepare
      $s: ununit(saturation($color))/100 * if($l <= 1, $l, 2 - $l); // prepare
      $v: ($l + $s) / 2;                                            // set the final saturation
      $s: (2 * $s) / ($l + $s);                                     // set the final value
      @if $model == hsv {
        @return $h percentage($s) percentage($v);
      } @else {
        @return $h percentage($s) percentage($v) alpha($color);
      }
    }
  }
  // can't convert the $color, just return it
  @return $color;
}


// contrast-color
// returns either the $light or $dark color by deciding which contrasts more with $color.
// This can be useful to select the more readable foreground color for a given background color.
// Return $light or $dark or null (if $color is null).
//    contrast-color(red, black, white)   -> white
//    contrast-color(cyan, black, white)  -> black
//    contrast-color(#111, black, white)  -> white
$contrast-color-algorithm: sRGB !default;
@function contrast-color($color, $dark, $light, $algorithm:$contrast-color-algorithm) {
  @if type-of($color) == list and length($color) >= 3 {
    $color: convert-color($color, rgba);
  }
  @if type-of($color) == color {
    $color-brightness: brightness($color, $algorithm);
    $dark-brightness: brightness($dark, $algorithm);
    $light-brightness: brightness($light, $algorithm);
    @return if(abs($color-brightness - $light-brightness) > abs($color-brightness - $dark-brightness), $light, $dark);
  }
  @return null;
}

// brightness
// Computes the "brightness" of a color.
// Returns a number between 0% and 100%, where 100% is fully bright (white) and
// 0% is fully dark (black). If $color is not color but just a number it returns
// the same value to be used as actual CSS brightness() filter function.
//    brightness(#111, YIQ)     -> 6.66667%
//    brightness(#111, HSP)     -> 6.66667%
//    brightness(#111, Rec-709) -> 6.66667%
//    brightness(#111, sRGB)    -> 5.49757%
// NOTE: YIQ and Rec-709 algorithms almost the same.
$brightness-algorithm: sRGB !default;
@function brightness($color, $algorithm:$brightness-algorithm) {
  @if type-of($color) == color {
    // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
    @if $algorithm == sRGB {
      $rgb: red($color), green($color), blue($color);
      $result: ();
      @for $i from 1 through 3 {
        $c: nth($rgb, $i);
        $c: $c / 255;
        $c: if($c < .03928, $c / 12.92, pow(($c + .055) / 1.055, 2.4));
        $result: append($result, $c);
      }
      @return (.2126 * nth($result, 1) + .7152 * nth($result, 2) + 0.0722 * nth($result, 3)) * 100%;
    }
    // http://www.w3.org/TR/AERT#color-contrast
    // https://en.wikipedia.org/wiki/YIQ
    @else if $algorithm == YIQ {
      @return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
    }
    // http://alienryderflex.com/hsp.html
    @else if $algorithm == HSP {
      @return root(((red($color)*red($color) * .299) + (green($color)*green($color) * .587) + (blue($color)*blue($color) * .114))) / 255 * 100%;
    }
    // https://en.wikipedia.org/wiki/Relative_luminance (gives the same values)
    // https://en.wikipedia.org/wiki/Rec._709 (see "Luma coefficients")
    @else if $algorithm == Rec-709 or $algorithm == BT-709 {
      @return ((red($color) * .2126) + (green($color) * .7152) + (blue($color) * .0722)) / 255 * 100%;
    }
    @error ("@function brightness(): Type the correct algorithm name.");
  }
  @else {
    @return unquote("brightness(#{$color})");
  }
}


// _color
// implements color adjusting/scaling/changing using different
// color models. Supported models: rgb, hsl, hsv/hsb. $props must be a map.
// $color can be any of rgb(a), hsl(a), hsv/hsb(a), hex and keyword color.
// By default $model is hsl.
//    color(adjust, #fff, (a:-20%))                        -> rgba(255,255,255,0.8)
//    color(scale, 5 40% 40%, (s:-30%, v:30%), hsv)        -> 5 28% 58%
//    color(change, rgb(10, 10, 10), (r:100%, g:50), rgb)  -> rgb(255,50,10)
// NOTE: to convert hsv/hsb values into valid CSS color use convert-color() func.
@function color($action, $color, $props, $model:hsl) {
  @if type-of($props) != map { @error "@function _color(): 4rd argument must be a map."; }
  @if $model == rgb {
    $color: convert-color($color, rgba);
    // initial values
    $org-r: red($color);
    $org-g: green($color);
    $org-b: blue($color);
    $org-a: alpha($color);
    // input values
    $r: if(map-has-key($props, r), map-get($props, r), null);
    $g: if(map-has-key($props, g), map-get($props, g), null);
    $b: if(map-has-key($props, b), map-get($props, b), null);
    $a: if(map-has-key($props, a), map-get($props, a), null);
    // change values
    @if $action == adjust {
      $r:  if($r == null, $org-r, limit($org-r + if(unit($r) == '%', 255/100 * ununit($r), $r), 0, 255));
      $g:  if($g == null, $org-g, limit($org-g + if(unit($g) == '%', 255/100 * ununit($g), $g), 0, 255));
      $b:  if($b == null, $org-b, limit($org-b + if(unit($b) == '%', 255/100 * ununit($b), $b), 0, 255));
      $a:  if($a == null, $org-a, limit($org-a + if(unit($a) == '%', $a/100%, $a), 0, 1));
    } @else if $action == scale {
      $r: if($r == null, $org-r, scale($org-r, ununit($r), 0, 255));
      $g: if($g == null, $org-g, scale($org-g, ununit($g), 0, 255));
      $b: if($b == null, $org-b, scale($org-b, ununit($b), 0, 255));
      $a: if($a == null, $org-a, scale($org-a, ununit($a), 0, 1));
    } @else if $action == change {
      $r: if($r == null, $org-r, limit(if(unit($r) == '%', 255/100 * ununit($r), $r), 0, 255));
      $g: if($g == null, $org-g, limit(if(unit($g) == '%', 255/100 * ununit($g), $g), 0, 255));
      $b: if($b == null, $org-b, limit(if(unit($b) == '%', 255/100 * ununit($b), $b), 0, 255));
      $a: if($a == null, $org-a, limit(if(unit($a) == '%', $a/100%, ununit($a)), 0, 1));
    }
    @return rgba($r, $g, $b, $a);

  } @else if $model == hsl or $model == hsv or $model == hsb {
    // initial values
    $org-h: null;
    $org-s: null;
    $org-lv: null;
    $org-a: null;
    @if $model == hsl {
      $color: convert-color($color, rgba);
      $org-h: hue($color);
      $org-s: saturation($color);
      $org-lv: lightness($color);
      $org-a: alpha($color);
    } @else {
      $color: convert-color($color, hsva);
      $org-h: nth($color, 1);
      $org-s: nth($color, 2);
      $org-lv: nth($color, 3);
      $org-a: nth($color, 4);
    }
    // input values
    $h: if(map-has-key($props, h), map-get($props, h), null);
    $s: if(map-has-key($props, s), map-get($props, s), null);
    $lv: null;
    @if $model == hsl {
      $lv: if(map-has-key($props, l), map-get($props, l), null);
    } @else {
      $lv: if(map-has-key($props, v), map-get($props, v), if(map-has-key($props, b), map-get($props, b), null));
    }
    $a: if(map-has-key($props, a), map-get($props, a), null);
    // change values
    //@debug ORIGINAL $org-h, $org-s, $org-lv, $org-a;
    //@debug PARAMS $h, $s, $lv, $a;
    @if $action == adjust {
      $h: if($h == null, $org-h, limit($org-h + if(unit($h) == '%', 360/100 * ununit($h), $h), 0, 360));
      $s: if($s == null, $org-s, limit($org-s + $s, 0, 100));
      $lv: if($lv == null, $org-lv, limit($org-lv + $lv, 0, 100));
      $a: if($a == null, $org-a, limit($org-a + if(unit($a) == '%', $a/100%, $a), 0, 1));
    } @else if $action == scale {
      $h: if($h == null, $org-h, scale($org-h, ununit($h), 0, 360));
      $s: if($s == null, $org-s, scale($org-s, ununit($s), 0, 100));
      $lv: if($lv == null, $org-lv, scale($org-lv, ununit($lv), 0, 100));
      $a: if($a == null, $org-a, scale($org-a, ununit($a), 0, 1));
    } @else if $action == change {
      $h: if($h == null, $org-h, limit(if(unit($h) == '%', 360/100 * ununit($h), $h), 0, 360));
      $s: if($s == null, $org-s, limit(ununit($s), 0, 100));
      $lv: if($lv == null, $org-lv, limit(ununit($lv), 0, 100));
      $a: if($a == null, $org-a, limit(if(unit($a) == '%', $a/100%, ununit($a)), 0, 1));
    }
    //@debug FINAL $h, $s, $lv, $a;
    @if $model == hsl {
      @return hsla($h, $s, $lv, $a);
    } @else {
      @return convert-color($h $s $lv $a, rgba);
    }
  }
  // invalid model, just return
  @return $color;
}
