// _list.scss provides functions for working with lists. Note that in Sass the first
// index of list item is 1 and not 0.

// slice
// returns new list with items from $list splitted by $start and $end indexes. When
// $start is greater than $end it returns list without items between $start and $end.
//          1 2 3 4
//    slice(a b c d, 2)       -> b c d
//    slice(a b c d, 2, 3)    -> b c
//    slice(a b c d, $end:3)  -> a b c
//    slice(a b c d, 4, 2)    -> a b d  (no items b/w 2 and 4)
//    slice(a b c d, 3, 1)    -> a c d  (no items b/w 1 and 3)
@function slice($list, $start:1, $end:length($list)) {
  $res: ();
  @if length($list) < $start {
    @return $res;
  }
  @if $start <= $end {
    @for $i from 1 through length($list) {
      @if $i >= $start and $i <= $end {
        $res: append($res, nth($list, $i));
      }
    }
  } @else {
    @for $i from 1 through length($list) {
      @if $i <= $end or $i >= $start {
        $res: append($res, nth($list, $i));
      }
    }
  }
  @return $res;
}

// nth-retrieve
// returns new list with items from $list by $indexes.
//    nth-retrieve(a b c d, 1 2)          -> a b
//    nth-retrieve(a b c d, 3 1 6)        -> c a
//    nth-retrieve(a b c d, 1 3 4, comma) -> a, c, d
@function nth-retrieve($list, $indexes, $separator:auto) {
  $res: ();
  @each $i in $indexes {
    @if $i and $i <= length($list) {
      $res: append($res, nth($list, $i), $separator);
    }
  }
  @return $res;
}

// nth-remove
// returns new list excluding items by $indexes.
//    nth-remove(a b c d, 2)        -> a c d
//    nth-remove(a b c d, 3 2)      -> a d
//    nth-remove(a b c d, 1, comma) -> b, c, d
@function nth-remove($list, $indexes, $separator:auto) {
  $res: ();
  @for $i from 1 through length($list) {
    @if index($indexes, $i) == null {
      $res: append($res, nth($list, $i), $separator);
    }
  }
  @return $res;
}

// value-remove
// returns new list without an item removed by $val name.
//    value-remove(a b c d, c)            -> a b d
//    value-remove(a b c (d e), a (d e))  -> b c
//    value-remove(a b c d, b, comma)     -> a, c, d
@function value-remove($list, $vals, $separator:auto) {
  $res: ();
  @each $list-val in $list {
    @if index($vals, $list-val) == null {
      $res: append($res, $list-val, $separator);
    }
  }
  @return $res;
}

// nth-replace
// returns new list replacing items by index and new value. $map must be a map where
// key = index of item to replace, value = new value for this item.
//    nth-replace(a b c d, (1:z, 3:x))      -> z b x d
//    nth-replace(a b c d, (6:x))           -> a b c d
//    nth-replace(a b c d, (2:z x), comma)  -> a, z x, c, d
@function nth-replace($list, $map, $separator:auto) {
  $res: ();
  @if type-of($map) == map {
    @for $i from 1 through length($list) {
      $val: nth($list, $i);
      @debug $i, $val;
      $new: map-get($map, $i);
      @if $new {
        $res: append($res, $new, $separator);
      } @else {
        $res: append($res, $val, $separator);
      }
    }
  }
  @return $res;
}

// value-replace
// returns new list replacing items by value. $map must be a map where
// key = name of item value to replace, value = new value for this item.
//    value-replace(a b c d, (b:w, a:z))      -> z b x d
//    value-replace(a b c d, (e:w))           -> a b c d
//    value-replace(a b c d, (b:w z), comma)  -> a, w z, c, d
@function value-replace($list, $map, $separator:auto) {
  $res: ();
  @if type-of($map) == map {
    @each $val in $list {
      $new: map-get($map, $val);
      @if $new {
        $res: append($res, $new, $separator);
      } @else {
        $res: append($res, $val, $separator);
      }
    }
  }
  @return $res;
}

// indexes
// returns new list with indexes of existing values from $list-1 according to $mode.
// Return modes: inter - intersection, diff - symmetric difference, abs-* - absolute
// intersection or difference:
//    inter      - indexes of $list-1 values that exists in $list-2;
//    abs-inter  - the same, but suppressing repeating items;
//    diff       - indexes of $list-1 values as if we subtract $list-2 from $list-1;
//    abs-diff   - the same, but suppressing repeating items.
//            1 2 3 4 5 6
//    indexes(a a b b c c, a f c, inter)      -> 1 2 5 6
//    indexes(a a b b c c, a f c, abs-inter)  -> 1 5
//    indexes(a a b b c c, a f c c, diff)     -> 2 3 4
//    indexes(a a b b c c, a f c, diff)       -> 2 3 4 6
//    indexes(a a b b c c, a f c, abs-diff)   -> 3 4
@function indexes($list-1, $list-2, $mode:inter) {
  $res: ();
  @if length($list-1) == 0 {
    @return $res;
  }
  @if $mode == inter {
    @for $i from 1 through length($list-1) {
      $val-1: nth($list-1, $i);
      @if index($list-2, $val-1) {
        $res: append($res, $i);
      }
    }
  } @else if $mode == abs-inter {
    $excl: ();
    @for $i from 1 through length($list-1) {
      $val-1: nth($list-1, $i);
      @if index($excl, $val-1) == null and index($list-2, $val-1) {
        $excl: append($excl, $val-1);
        $res: append($res, $i);
      }
    }
  } @else if $mode == diff {
    @for $i from 1 through length($list-1) {
      $val-1: nth($list-1, $i);
      $t: index($list-2, $val-1);
      @if $t {
        $list-2: nth-remove($list-2, $t);
      } @else {
        $res: append($res, $i);
      }
    }
  } @else if $mode == abs-diff {
    @for $i from 1 through length($list-1) {
      $val-1: nth($list-1, $i);
      @if index($list-2, $val-1) == null {
        $res: append($res, $i);
      }
    }
  }
  @return $res;
}

// inter(section)
// returns new list with items exists in both $list-1 and $list-2. If $mode = abs
// it returns the same but no repeating elements.
//    inter(a a b c, a a b f)           -> a a b
//    inter(a a b c, a a a b f)         -> a a a b
//    inter(a a b c, a a a b f, abs)    -> a b
//    inter(a (b b) a, f (b b) f)       -> (b b)
//    inter(a (b b) a, f (b b) f, abs)  -> (b b)
@function inter($list-1, $list-2, $mode:null, $separator:auto) {
  @if $mode == abs {
    $indexes: indexes($list-2, $list-1, abs-inter);
    @return nth-retrieve($list-2, $indexes, $separator);
  } @else {
    $indexes: indexes($list-2, $list-1, inter);
    @return nth-retrieve($list-2, $indexes, $separator);
  }
}

// diff(erence)
// returns new list with items as if we subtract $list-2 from $list-1.
//    diff(a a b c c, a b f)           -> a c c
//    diff(a a b c c, a b f, abs)      -> c c
//    diff(a a b c c, a a b f)         -> c c
//    diff(a (b b) a, f (b b) f)       -> a a
//    diff(a (b b) a, f (b b) f, abs)  -> a a
@function diff($list-1, $list-2, $mode:null, $separator:auto) {
  @if $mode == abs {
    $indexes: indexes($list-1, $list-2, abs-diff);
    @return nth-retrieve($list-1, $indexes, $separator);
  } @else {
    $indexes: indexes($list-1, $list-2, diff);
    @return nth-retrieve($list-1, $indexes, $separator);
  }
}

// union
// returns new list with items from $list-1 + items from $list-2 that do not exists
// in $list-1. If $mode = abs it returns the same but no repeating elements.
//    union(a a b c, a a f f)           -> a a b c f f
//    union(a a b c, a a a f f)         -> a a b c a f f
//    union(a a b c, a a a f f, abs)    -> a b c f
//    union(a (b b) a, f (b b) f)       -> a (b b) a f f
//    union(a (b b) a, f (b b) f, abs)  -> a (b b) f
@function union($list-1, $list-2, $mode:null, $separator:auto) {
  @if $mode == abs {
    $diff: indexes($list-2, $list-1, abs-diff);
    $temp: join($list-1, nth-retrieve($list-2, $diff));
    @return nth-retrieve($temp, indexes($temp, $temp, abs-inter), $separator);
  } @else {
    $indexes: indexes($list-2, $list-1, diff);
    @return join($list-1, nth-retrieve($list-2, $indexes), $separator);
  }
}
