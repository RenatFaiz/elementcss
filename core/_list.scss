// _list.scss provides wide range of functions to work with lists. Note that in
// Sass lists the first index is 1, but not 0.

// wrap
// folds ("wrap") a given $list into additional parenthesis. Simply put, it
// creates additional nesting level.
//    $list: a b c;
//    @debug length($list);       -> 3
//    @debug length(wrap($list)); -> 1
@function wrap($list) {
  @return if(length($list) > 1, append((), $list), $list);
}

// unwrap
// unfolds ("unwrap") a given $list from a parenthesis. Simply put, it removes
// one nesting level.
//    $list: ((a b) c);
//    @debug length($list);         -> 2
//    @debug length(unwrap($list)); -> 3
@function unwrap($list) {
  $res: ();
  @each $v in $list {
    $res: join($res, $v);
  }
  @return $res;
}

// n
// multidimensional analog of built-in nth() function.
//    $list: img (sm (10px 20px) md (30px 40px));
//    n($list, 2)           -> sm (10px 20px) md (30px 40px)
//    n($list, 2, 4)        -> 30px 40px
//    n($list, 2, 4, 1)     -> 40px
//    n($list, 2, 4, 1, 99) -> null
@function n($list, $indexes...) {
  @if length($indexes) > 0 {
    // handle args... (a b c) instead (a, b, c)
    @if length(nth($indexes, 1)) > 1 {
      $indexes: nth($indexes, 1);
    }
    @each $i in $indexes {
      $list: if($i <= length($list), nth($list, $i), null);
    }
  }
  @return $list;
}

// nth-*
// All nth-* functions use unified format for specifying $indexes of list items
// to retrieve/remove/replace etc. You can point items using simple set of
// numbers for lists with one level of nesting or use maps to create complex
// retrieval on different levels. Using the latter means that key = index of
// element on current nesting level and value = indexes of items within.
//    1 2 4             a (b c (D E)) f g     -> a, (b c (D E)), g
//                      ^ ^             ^
//    1 (2:2 3) 3       a (b c (D E)) f g     -> a, c, (D E), f
//                      ^    ^ ^      ^
//    (2:1 (3:1)) 1     a (b c (D E)) f g     -> b, D, a
//                      ^  ^    ^     ^

// nth-retrieve
// returns item(s) from $list by a given $indexes. See nth-* examples to
// specify $indexes properly.
//    $list: a (b c (D E)) f;
//    nth-retrieve($list, 1 3)                -> a f
//    nth-retrieve($list, 1 3, comma)         -> a, f
//    nth-retrieve($list, (2:1 2))            -> b c
//    nth-retrieve($list, 1 (2:2 (3:1 2)) 3)  -> a (c (D E)) f
@function nth-retrieve($list, $indexes, $separator:auto) {
  $res: ();
  @each $i in $indexes {
    @if type-of($i) == number and $i <= length($list) {
      $res: append($res, nth($list, $i), $separator);
    } @else if type-of($i) == map {
      @each $k, $v in $i {
        @if type-of($k) == number and $k <= length($list) {
          $res: append($res, nth-retrieve(nth($list, $k), $v, $separator), $separator);
        }
      }
    } @else if type-of($i) == list {
      $k: nth($i, 1);
      $v: nth($i, 2);
      @if type-of($k) == number and $k <= length($list) {
        $res: append($res, nth-retrieve(nth($list, $k), $v, $separator), $separator);
      }
    }
  }
  @return $res;
}

// _nth-action
// implements nth-remove(), nth-set(), nth-replace(), nth-insert() functions.
// For more information, see appropriate function.
@function _nth-action($action, $list, $indexes, $v1:null, $v2:null, $sep:auto) {
  $res: ();
  // go through each item in list
  @for $i from 1 through length($list) {
    $item: nth($list, $i);
    $status: true;
    // go through each index
    @each $j in $indexes {
      @if type-of($j) == number and $j == $i { // if $indexes are numbers
        // nth-remove()
        @if $action == remove       { $status: false; }
        // nth-set()
        @else if $action == set     { $item: $v1; }
        // nth-replace()
        @else if $action == replace { $item: if($item == $v1, $v2, $item); }
        // nth-insert()
        @else {
          $status: false;
          $mode: nth($v2,1);
          $v1: if(length($v2)>1, wrap($v1), $v1);
          $item: if(length($item)>1, wrap($item), $item); // wrap mode
          $res: join($res, if($mode==post, join($item, $v1), join($v1, $item)));
        }
        $indexes: remove($indexes, $j); // remove used index
      } @else if type-of($j) == map { // if map in the middle of $indexes
        @each $k, $v in $j {
          @if type-of($k) == number and $k == $i {
            $item: _nth-action($action, $item, $v, $v1, $v2, $sep);
          }
        }
      } @else if type-of($j) == list { // if $indexes is map
        $k: nth($j, 1); $v: nth($j, 2);
        @if type-of($k) == number and $k == $i {
          $item: _nth-action($action, $item, $v, $v1, $v2, $sep);
        }
      }
    }
    @if $status {
      $res: append($res,$item,$sep);
    }
  }
  @return $res;
}

// nth-remove
// returns new list excluding items from $list by $indexes. See nth-* examples
// to specify $indexes properly.
//    $list: a (b c (D E)) f;
//    nth-remove($list, 1 2)                -> f
//    nth-remove($list, 2 1)                -> f
//    nth-remove($list, (2:2))              -> a (d (D E)) f
//    nth-remove($list, (2:1 2 (3:1)) 1 3)  -> ((E))
@function nth-remove($list, $indexes, $separator:auto) {
  @return _nth-action(remove, $list, $indexes, $sep:$separator);
}

// nth-set
// returns new list setting new items on the specified $indexes. See nth-*
// examples to specify $indexes properly. Function can be used two ways:
//  (1) define $indexes by usual way and $val as a new item. Useful to replace
//  several items by one value.
//  (2) define $indexes as a map where key = indexes of what to set, value =
//  new item. Key in Sass maps can be whatever including another map, list,
//  numbers etc.  Useful to replace several items by different values. $val
//  must be omitted in this case;
//    $list: a (b c (D E)) f;
//    nth-set($list, 2, T)                  -> a T f  (1)
//    nth-set($list, 1 2, T)                -> T T f  (1)
//    nth-set($list, (1:T, 2:F))            -> T F f  (2)
//    nested examples:
//    nth-set($list, (2:2 (3:2)) 3, T)      -> a (b T (D T)) T  (1)
//    nth-set($list, ((2:2 (3:2)):T, 3:F))  -> a (b T (D T)) F  (2)
@function nth-set($list, $indexes, $val:null, $separator:auto) {
  @if type-of($indexes) == map and $val == null {
    @each $k, $v in $indexes {
      $list: _nth-action(set, $list, $k, $v, $sep:$separator);
    }
    @return $list;
  }
  @return _nth-action(set, $list, $indexes, $val, $sep:$separator);
}

// nth-replace
// returns new list replacing items on the specified $indexes from $old to
// $new. Unlike nth-set(), it sets to $new value only if the item by given
// index is equal to $old. See nth-* examples to specify $indexes properly.
// Function can be used to replace multiple indexes by different values (2).
//    $list: a (b b) c;
//    nth-replace($list, 1, a, T)             -> T (b b) c
//    nth-replace($list, 1 2 3, a, T)         -> T (b b) c
//    nth-replace($list, (2:2), b, T)         -> a (b T) c
//    nth-replace($list, (2:1 2), b, T)       -> a (T T) c
//    nth-replace($list, (1:a T, 3:c F)       -> T (b b) F (2)
//    nth-replace($list, (1:a T, (2:2):b F)   -> T (b F) c (2)
@function nth-replace($list, $indexes, $old:null, $new:null, $separator:auto) {
  @if type-of($indexes) == map and $old == null and $new == null {
    @each $k, $v in $indexes {
      $list: _nth-action(replace, $list, $k, nth($v,1), nth($v,2), $separator);
    }
    @return $list;
  }
  @return _nth-action(replace, $list, $indexes, $old, $new, $separator);
}

// nth-insert
// returns new list inserting new items to the specified $indexes. See nth-*
// examples to specify $indexes properly. $mode can be `pre` or `post`(default)
// with additional `wrap` option. If you do multi-value insertion (2), $val
// must be omitted.
//    $list: a (b c);
//    nth-join($list, 1 2, T T)                         -> a T T (b c) T T
//    nth-join($list, 1 2, T T, pre)                    -> T T a T T (b c)
//    nth-join($list, 1 2, T T, pre wrap)               -> (T T) a (T T) (b c)
//    nth-join($list, 1 2, T T, post wrap)              -> a (T T) (b c) (T T)
//    nth-join($list, (2:2), T T, pre)                  -> a (b T T c)
//    nth-join($list, (1:1), T T, pre)                  -> (T T a) (b c)
//    nth-join($list, (1:1), T T, pre wrap)             -> ((T T) a) (b c)
//    multi-value insertion:
//    nth-join($list, ((1:1):T T, 2:F))                 -> (a T T) (b c) F  (2)
//    nth-join($list, (1:T T, 2:F), $mode: pre wrap)    -> (T T) a F (b c)  (2)
// Important, if you do insertions at the same index (eg inside
// and outside of an item) - inner indexes must come first:
//    good        | bad
//    (2:1) 2     | 2 (2:1)
//    (2:(2:1) 2) | (2:2 (2:1))
@function nth-insert($list, $indexes, $val:null, $mode:post wrap, $separator:auto) {
  @if type-of($indexes) == map and $val == null {
    @each $k, $v in $indexes {
      $list: _nth-action(insert, $list, $k, $v, $mode, $separator);
    }
    @return $list;
  }
  @return _nth-action(insert, $list, $indexes, $val, $mode, $separator);
}

// indexes
// returns new list with indexes of existing values from $list1 according to $mode.
// There are 4 return $types: inter - intersection, diff - symmetric
// difference, abs-* - absolute intersection or difference.
//    inter      - indexes of $list1 values that exists in $list2;
//    abs-inter  - the same, but suppressing repeating items;
//    diff       - indexes of $list1 values as if we subtract $list2 from $list1;
//    abs-diff   - the same, but suppressing repeating items;
//            1 2 3 4 5 6
//    indexes(a a b b c c, a F c, inter)      -> 1 2 5 6
//    indexes(a a b b c c, a F c, abs-inter)  -> 1 5
//    indexes(a a b b c c, a F c c, diff)     -> 2 3 4
//    indexes(a a b b c c, a F c, diff)       -> 2 3 4 6
//    indexes(a a b b c c, a F c, abs-diff)   -> 3 4
@function indexes($list1, $list2, $type:inter, $abs:false) {
  $res: ();
  @if length($list1) == 0 {
    @return $res;
  }
  @if $type == inter {
    @if $abs {
      $excl: ();
      @for $i from 1 through length($list1) {
        $val1: nth($list1, $i);
        @if index($excl, $val1) == null and index($list2, $val1) {
          $excl: append($excl, $val1);
          $res: append($res, $i);
        }
      }
    } @else {
      @for $i from 1 through length($list1) {
        $val1: nth($list1, $i);
        @if index($list2, $val1) {
          $res: append($res, $i);
        }
      }
    }
  } @else { // $type == diff
    @if $abs {
      @for $i from 1 through length($list1) {
        $val1: nth($list1, $i);
        @if index($list2, $val1) == null {
          $res: append($res, $i);
        }
      }
    } @else {
      @for $i from 1 through length($list1) {
        $val1: nth($list1, $i);
        $t: index($list2, $val1);
        @if $t {
          $list2: nth-remove($list2, $t);
        } @else {
          $res: append($res, $i);
        }
      }
    }
  }
  @return $res;
}

// inter(section)
// returns new list with items from $list1 that exists in $list2. If $abs is
// true it returns the same result, but suppressing repeating elements.
//    inter(a b c, a T T)           -> a
//    inter(a b c, a b T)           -> a b
//    inter(a b c, a a b T)         -> a b
//    inter(a a b c, a b T)         -> a a b
//    inter(a a b b, a b T, true)   -> a b
@function inter($list1, $list2, $abs:false, $separator:auto) {
  $indexes: null;
  @if $abs {
    $indexes: indexes($list1, $list2, inter, true);
  } @else {
    $indexes: indexes($list1, $list2, inter);
  }
  @return nth-retrieve($list1, $indexes, $separator);
}

// diff(erence)
// returns new list with items as if we subtract $list2 from $list1. If $abs
// is true it returns the same result, but suppressing repeating elements.
//    diff(a a b c, a b T)              -> a c
//    diff(a a b c, a a b T)            -> c
//    diff(a a b c, a b T, abs)         -> c
//    diff(a (b b) a, T (b b) T)        -> a a
//    diff(a (b b) a, T (b b) T, abs)   -> a a
@function diff($list1, $list2, $abs:false, $separator:auto) {
  $indexes: null;
  @if $abs {
    $indexes: indexes($list1, $list2, diff, true);
  } @else {
    $indexes: indexes($list1, $list2, diff);
  }
  @return nth-retrieve($list1, $indexes, $separator);
}

// union
// returns new list with items from $list1 + items from $list2 do not exists in
// $list1 (hence add difference b/w 2&1). If $abs is true it returns the same
// result (as if it wasn't specified), but suppressing repeating elements.
// $mode can be `post`(default) or `pre` with additional `wrap` option. $mode
// controls the position of new elements and "wrap" them or not.
//    union(a b c, a T)                   -> a b c T
//    union(a b c, a a T)                 -> a b c a T
//    union(a b c, a a T, $abs:true)      -> a b c T
//    union(a b c, a a T, post wrap)      -> a b c (a T)
//    union(a b c, a a T, pre wrap)       -> (a T) a b c
//    union(a b c, a a T, pre wrap, abs)  -> T a b c
@function union($list1, $list2, $mode:post, $abs:false, $separator:auto) {
  @if length($list1) == 0 {
    @return $list2;
  }
  $indexes: if($abs==abs, indexes($list2,$list1,abs-diff), indexes($list2,$list1,diff));
  $vals: nth-retrieve($list2, $indexes);
  // remove repeating elements from $vals and $list1
  @if $abs {
    $vals: diff($vals, $list1, true); // add inter?
    $list1: inter($list1, $list1, true);
  }
  // wrap $vals if `wrap` specified
  $vals: if(length($mode)>1, wrap($vals), $vals);
  @return if(nth($mode,1)==post, join($list1, $vals), join($vals, $list1));
}

// slice
// returns new list with items from $list splitted by $start and $end indexes. When
// $start is greater than $end it returns list without items between $start and $end.
//          1 2 3 4
//    slice(a b c d, 2)       -> b c d  (items starting from 2nd inclusively)
//    slice(a b c d, 2, 3)    -> b c    (items b/w 2 and 3 inclusively)
//    slice(a b c d, $end:3)  -> a b c  (items up to 3rd inclusively)
//    slice(a b c d, 4, 2)    -> a b d  (no items b/w 2 and 4 exclusively)
//    slice(a b c d, 3, 1)    -> a c d  (no items b/w 1 and 3 exclusively)
@function slice($list, $start:1, $end:length($list), $separator:auto) {
  $res: ();
  @if length($list) < $start { // add or $end >
    @return $res;
  }
  @if $start <= $end { // trim on the edges
    @for $i from 1 through length($list) {
      @if $i >= $start and $i <= $end {
        $res: append($res, nth($list, $i), $separator);
      }
    }
  } @else { // cut range within
    @for $i from 1 through length($list) {
      @if $i <= $end or $i >= $start {
        $res: append($res, nth($list, $i), $separator);
      }
    }
  }
  @return $res;
}

// collate
// collates list items from each $args and returns new general list. You can
// specify `strict` mode and separator:
//    `strict` - restrict collating to the first list length
//    `comma`  - collates into multidimensional list separating by comma
//    `space`  - collates into multidimensional list separating by space
// Unlike built-in zip() function the output can be adjusted by first argument.
//                                                              |
//    collate(1px 2px, solid dashed, red blue)  -> 1px solid red 2px dashed blue
//    collate(1px 2px, solid, red)              -> 1px solid red 2px dashed blue
//    collate(comma, 1px 2px, solid, red)       -> 1px solid red, 2px dashed blue
//    collate(space, 1px 2px, solid, red)       -> (1px solid red),(2px dashed blue)
//    collate(strict, 1px 2px, solid, red)      -> 1px solid red
//    collate(strict comma, 1px 2px 3px, solid dashed, red blue)
//                                              -> 1px solid red, 2px dashed blue
@function collate($args...) {
  @if length($args) == 1 {
    @return nth($args,1);
  }
  $res: ();
  // first item in $args
  $base: nth($args, 1);
  // detect if separator or strict mode is specified
  $sep: false;
  $strict: false;
  @if length($base) <= 2 {
    @if index($base, strict) {
      $strict: true;
      $base: diff($base, strict);
    }
    @if length($base)==1 {
      $tmp: nth($base,1);
      @if $tmp == comma { $sep: comma; }
      @else if $tmp == space { $sep: space; }
    }
    @if $sep or $strict {
      $args: slice($args, 2); // remove `[strict] [separator],` from $args
      $base: nth($args, 1); // redefine $base as 2nd item of $args
    }
  }

  $i: 1;
  $blen: length($base);
  $alen: length($args);
  @while $i <= $blen {
    $j: 1;
    $item: ();
    @while $j <= $alen {
      $a: nth($args, $j);
      @if $strict  {
        @if $i > length($a) {
          $i: $i + $blen; // break outer loop
          $j: $j + $alen; // break this loop
        } @else {
          $v: nth($a, $i);
          $item: append($item, $v);
          $j: $j + 1;
        }
      } @else {
        $v: if($i > length($a), nth($a,length($a)), nth($a,$i));
        $item: append($item, $v);
        $j: $j + 1;
      }
    }
    @if $i <= $blen {
      $res: if($sep, append($res,$item,$sep), join($res,$item));
      $i: $i + 1;
    }
  }
  @return if(length($res)==1, unwrap($res), $res);
}

// replace only first element from $list
@function _replace-first($list, $old, $new, $sep:auto) {
  $res: ();
  $dirty: false;
  @each $v in $list {
    @if $dirty == false and $v == $old {
      $v: $new;
      $dirty: true;
    }
    $res: append($res,$v,$sep);
  }
  @return $res;
}

// replace only last element from $list
@function _replace-last($list, $old, $new, $sep:auto) {
  $res: ();
  $i: length($list);
  $dirty: false;
  @while $i > 0 {
    $v: nth($list, $i);
    @if $dirty == false and $v == $old {
      $v: $new;
      $dirty: true;
    }
    $res: join(wrap($v),$res,$sep);
    $i: $i - 1;
  }
  @return $res;
}

// replace all elements from $list
@function _replace-all($list, $old, $new:null, $sep:auto) {
  $res: ();
  @each $v in $list {
    @if $v == $old {
      $res: append($res,$new,$sep);
    } @else {
      $res: append($res,$v,$sep);
    }
  }
  @return $res;
}

// replace
// returns new list replacing all (!) occurrences by new value. $args can be
// defined 2 ways:
//    (1) as `old, new` to replace items by one name
//    (2) as a map `(old:new, old:new, ..)` to do multi-value replace
// Function provides 3 $mode: `all`, `first`, `last` to replace occurrences
// according to mode.
//    $list: a B B c D D;
//    replace($list, B, T)                      -> a T T c D D      (1)
//    replace($list, B, T, first)               -> a T B c D D
//    replace($list, B, T, last)                -> a B T c D D
//    replace($list, (B:T))                     -> a T T c D D      (2)
//    replace($list, (B:T, D:T))                -> a T T c T T
//    replace($list, (B:T, D:T), $mode:first)   -> a T B c T D
//    replace($list, (B:T, D:T), $mode:last)    -> a B T c D T
@function replace($list, $old, $new:null, $mode:all, $separator:auto) {
  $res: ();
  @if type-of($old) == map and $new == null {
    @if $mode == all {
      @each $v in $list {
        $new: map-get($old, $v);
        @if $new {
          $res: append($res,$new,$separator);
        } @else {
          $res: append($res,$v,$separator);
        }
      }
      @return $res;
    } @else if $mode == first {
      @each $k,$v in $old { $list: _replace-first($list,$k,$v,$separator); }
    } @else { //last
      @each $k,$v in $old { $list: _replace-last($list,$k,$v,$separator); }
    }
    @return $list;
  }
  @if $mode == all {
    @each $v in $list {
      @if $v == $old {
        $res: append($res,$new,$separator);
      } @else {
        $res: append($res,$v,$separator);
      }
    }
    @return $res;
  } @else if $mode == first { @return _replace-first($list,$old,$new,$separator);
  } @else                   { @return _replace-last($list,$old,$new,$separator); }
}

// removes first occurrence from $list
@function _remove-first($list, $val) {
  $res: ();
  $exc: ();
  @each $v in $list {
    @if index($val, $v) and index($exc,$v) == null {
      $exc: append($exc, $v);
    } @else {
      $res: append($res, $v);
    }
  }
  @return $res;
}

// removes first occurrence from $list
@function _remove-last($list, $val) {
  $res: ();
  $exc: ();
  $i: length($list);
  @while $i > 0 {
    $v: nth($list, $i);
    @if index($val,$v) and index($exc,$v) == null {
      $exc: append($exc, $v);
    } @else {
      $res: join(wrap($v), $res);
    }
    $i: $i - 1;
  }
  @return $res;
}

// remove
// returns new list removing $list items $vals.
//    $list: a B B c D D;
//    remove($list, B, T)                      -> a T T c D D      (1)
@function remove($list, $vals, $separator:auto) {
  $res: ();
  @each $v in $list {
    @if index($vals, $v) == null {
      $res: append($res, $v, $separator);
    }
  }
  @return $res;
}

// list-map
// converts a given list into a map. Odd elements are discarded.
//    list-map(sm 5px md 10px)    -> (sm: 5px, md: 10px)
//    list-map(sm 5px md 10px lg) -> (sm: 5px, md: 10px)
@function list-map($list) {
  @if type-of($list) != list {
    @return $list;
  }
  $map: ();
  $i: 1;
  $len: length($list);
  @while $i < $len {
    $map: map-append($map, nth($list, $i), nth($list, $i + 1));
    $i: $i + 2;
  }
  @return $map;
}

// before
// returns value from $list follows before the $val. Returns null if there is
// no such $val or $list length is less than 2.
// Useful to work with CSV lists.
//    before(head 24px body 16px title 20px, 16px)  -> body
//    before(md 3rem sm (1rem 2rem), 1rem 2rem)     -> sm
@function before($list, $val) {
  @if length($list) < 2 or type-of($list) != list {
    @return null;
  }
  @for $i from 1 through length($list) {
    @if nth($list, $i) == $val {
      @return nth($list, $i - 1);
    }
  }
  @return null;
}

// after
// returns value from $list follows the $val. Returns null if there is no such
// $val, $list length is less than 2 or the desired value follows the $val is
// out of $list.
// Useful to work with CSV lists.
//    after(head 24px body 16px title 20px, body) -> 16px
//    after(md 3rem sm (1rem 2rem), sm)           -> 1rem 2rem
@function after($list, $val) {
  @if length($list) < 2 or type-of($list) != list {
    @return null;
  }
  @for $i from 1 through length($list) {
    @if nth($list, $i) == $val and $i < length($list) {
      @return nth($list, $i+1);
    }
  }
  @return null;
}
