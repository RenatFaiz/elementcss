// _metrics.scss provides 2 functions: first restricts input values into fixed base
// according to your baseline ("snapping"); second for calculating grid parameters
// like column width, gap width etc.

// calc-line
// provides convenient way to control vertical/horizontal rhythm. It snap any input CSS
// value (eg line-height, margin, height etc) and restrict it to fixed base according
// to your page layout baseline. Useful to sync values with invisible v/h grid.
// TODO: describe arguments, delete comments from default vars
//    calc-line(1 0.5, 8px)           -> 0.5rem 0.25rem;
//    calc-line(0.25 0.5 1, $unit:px) -> 2px 4px 8px;
//    calc-line(0 1 important)        -> 0 0.5rem !important;
//    calc-line(15px, 16px, px, 100%) -> 16px
//    calc-line(31px, 16px, px, 100%) -> 32px
//    calc-line(15px, 16px, px, 60%)  -> 32px
//    calc-line(31px, 16px, px, 60%)  -> 64px
//    usage example:
//      $calc-line-baseline: 22px; (optional) allow to skip constantly entering `baseline` arg
//      $calc-line-unit: rem;      (optional) allow to skip constantly entering `unit` arg
//      img { padding: calc-line(0.5 1); height: calc-line(6); } ->
//      img { padding: 0.6875rem 1.375rem; height: 8.25rem; }
$calc-line-baseline:  8px !default;     // number with valid CSS unit
$calc-line-unit:      rem !default;     // valid CSS unit
$calc-line-threshold: 100% !default;    // new line jumping threshold
$calc-line-pitch:     1 !default;       // new line jumping pitch (> 0)
$calc-line-round:     false !default;   // round to integer pixel
$calc-line-parent:    16 !default;      // round to integer pixel
@function calc-line(
  $vals,
  $baseline:  $calc-line-baseline,
  $unit:      $calc-line-unit,
  $thresh:    $calc-line-threshold,
  $pitch:     $calc-line-pitch,
  $round:     $calc-line-round,
  $parent:    $calc-line-parent) {
  $res: ();
  @each $v in $vals {
    @if type-of($v) == number {
      @if unitless($v) {
        @if $v != 0 {
          $v: $v * convert-length($baseline, rem);
        }
      } @else {
        // baseline is always 16px parent
        $bs: trim-unit(convert-length($baseline, px));
        $v: trim-unit(convert-length($v, px, $parent));
        $th: trim-unit($thresh);

        $base: $bs * ($th / 100);
        $ratio: ceil($v / $base);
        $calc: $base * ($ratio - 1);
        @if $pitch <= 0 {
          @error "@function calc-line(): $pitch must be positive non-zero number."
        }
        @while ($v > $calc) {
          $calc: $calc + $base * $pitch;
        }
        $v: $calc / $base * $baseline;
      }
      $v: if($round, round-length($v, $unit, $parent), convert-length($v, $unit, $parent));
      $res: append($res, $v);
    }
    @else if $v == important or $v == "!important" {
      $res: append($res, unquote('!important'));
    }
  }
  @if length($res) == 1 {
    @return nth($res, 1);
  }
  @return $res;
}

// calc-grid
// returns grid parameter(s) according to grid settings. $data has the folowing syntax:
// [column-number] [calc-method] [param1] ([param2]). 1st item - number of grid columns,
// 2nd - method based on what will be made calculation, 3rd - input data for calculation
// according to selected method. If method is `column-gap` you must provide 2 params.
// $return specify what the param(s) of grid to return: `all` -> (col number, col width,
// gap width), `columns` -> (col number), `column` -> (col width), `gap` -> (gap width).
//    calc-grid(all, 6 gap 2%)                -> 6 16.66667% 2%
//    calc-grid(gap, 6 gap 2%)                -> 2%
//    calc-grid(column, 6 gap 2%)             -> 16.66667%
//    calc-grid(all, 6 column 6%)             -> 6 16.66667% 10.66667%
//    calc-grid(all, 6 column-gap 60px 20px)  -> 6 16.66667% 4.34783% *
//    * if your container's width is 480px ((60+20)*6), then resulting column and
//    gap widths will 60px and 20px respectively
@function calc-grid($return, $data) {
  @if length($data) < 3 {
    @error "@mixin grid(): wrong number of calc values in 2nd argument. Please, check the syntax.";
  }
  @if nth($data, 2) == column-gap and length($data) < 4 {
      @error "@mixin grid(): `column-gap` calc method requires 2 values after method declaration. Please, check the syntax.";
  }
  $columns: nth($data, 1);
  $calc-method: nth($data, 2);
  $calc-data: if(length($data) == 4, slice($data, 3), nth($data, 3));

  $column: 100% / $columns; // constant
  $gap: null;
  @if $calc-method==gap {
    $gap: $calc-data;
  }
  @else if $calc-method==column {
    $gap: (100% - ($calc-data * $columns)) / $columns;
  }
  @else if $calc-method==column-gap {
    $px-column: nth($calc-data, 1);
    $px-gap: nth($calc-data, 2);
    $px-row: ($columns * $px-column) + ($px-gap * ($columns - 1));
    $percent-gap: percentage($px-gap/$px-row);

    $gap: $percent-gap;
  }

  @if $return == all          { @return $columns $column $gap; }
  @else if $return == column  { @return $column; }
  @else if $return == gap     { @return $gap; }
  @else if $return == columns { @return $columns; }
}
