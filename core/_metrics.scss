// _metrics.scss provides 2 functions: first converts arbitrary values into values
// fixed ones according to your base-line ("snapping"); second for calculating grid
// system parameters like column width, gap width etc.

// calc-line
//
// provides convenient way to control vertical/horizontal rhythm. It snap any input CSS
// value (eg: line-height, margin, height etc) and snap it (restrict to fixed base)
// according to your page layout baseline. Useful to sync values with invisible v/h grid.
//    calc-line(1 0.5, 8px)           -> 0.5rem 0.25rem;
//    calc-line(0.25 0.5 1, $unit:px) -> 2px 4px 8px;
//    calc-line(0 1 important)        -> 0 0.5rem !important;
//    TODO(timur): update the example
//     result:
//       0px  ---  ---  -----
//             a    A     ^
//      14px  ---  ---   /_\
//                      /  \
//      28px  ---  ---  ------
//      font- 6px 12px  18px
//      size:
$calc-line-baseline:  8px !default;   // number with valid CSS unit
$calc-line-unit:      rem !default;   // valid CSS unit
$calc-line-threshold: 100% !default;  // new line jumping threshold
$calc-line-pitch:     0.5 !default;   // new line jumping pitch (> 0)
$calc-line-round:     false !default; // round to integer pixel
@function calc-line(
  $vals,
  $baseline:  $calc-line-baseline,
  $unit:      $calc-line-unit,
  $threshold: $calc-line-threshold,
  $pitch:     $calc-line-pitch,
  $round:     $calc-line-round) {
  $res: ();
  @each $v in $vals {
    @if type-of($v) == number {
      @if unitless($v) {
        @if $v != 0 {
          $v: $v * convert-unit($baseline, rem);
        }
      } @else {
        $temp: $baseline;
        $thresh: trim-unit($threshold);

        $v: trim-unit(convert-unit($v, px));
        $base: trim-unit(convert-unit($baseline, px)) * ($thresh / 100);
        $ratio: ceil($v / $base);
        $calc: $base * ($ratio - 1);
        @if $pitch <= 0 {
          @error "@function calc-line(): $pitch must be positive non-zero number."
        }
        @while ($v > $calc) {
          $calc: $calc + $base * $pitch;
        }
        $v: $calc / $base * $temp;
      }

      $v: if($round, round-unit($v, $unit), convert-unit($v, $unit));
      $res: append($res, $v);
    }
    @else if $v == important or $v == "!important" {
      $res: append($res, unquote('!important'));
    }
  }
  @if length($res) == 1 {
    @return nth($res, 1);
  }
  @return $res;
}

// calc-grid
// returns grid parameter(s) according to grid settings. $data has the folowing syntax:
// [column-number] [calc-method] [param1] ([param2]). 1st item - number of grid columns,
// 2nd - method based on what will be made calculation, 3rd - input data for calculation
// according to selected method. If method is `column-gap` you must provide 2 params.
// $return specify what the param(s) of grid to return: `all` -> (col number, col width,
// gap width), `columns` -> (col number), `column` -> (col width), `gap` -> (gap width).
//    calc-grid(all, 6 gap 2%)                -> 6  16.66667% 1%
//    calc-grid(gap, 6 gap 2%)                -> 1%
//    calc-grid(column, 6 gap 2%)             -> 16.66667%
//    calc-grid(all, 6 column 6%)             -> 2 50% 49%
//    calc-grid(all, 6 column-gap 60px 20px)  -> 6 16.66667% 2.17391% *
//    * if your container's width is 480px ((60+20)*6), then resulting column and
//    gap widths will 60px and 20px resp.
$calc-grid-data: null !default;
@function calc-grid($return, $data:$calc-grid-data) {
  @if length($data) < 3 {
    @error "@mixin grid(): wrong number of calc values in 2nd argument. Please, check the syntax.";
  }
  @if nth($data, 2) == column-gap and length($data) < 4 {
      @error "@mixin grid(): `column-gap` calc method requires 2 values after method declaration. Please, check the syntax.";
  }

  $columns: nth($data, 1);
  $calc-method: nth($data, 2);
  $calc-data: if(length($data) == 4, slice($data, 3), nth($data, 3));

  // gaps by padding
  $column: null;
  $gap: null;
  @if $calc-method==gap {
    $gap: $calc-data;

    $column: 100% / $columns;
    $gap: $gap/2;
  }
  @else if $calc-method==column {
    $ratio: $calc-data;

    $column: 100% / $columns;
    $gap: (100% - ($ratio * $columns)) / $columns;
  }
  @else if $calc-method==column-gap {
    $px-column: nth($calc-data,1);
    $px-gap: nth($calc-data,2);
    $px-row: ($columns * $px-column) + ($px-gap * ($columns - 1));
    $percent-gap: percentage($px-gap/$px-row);

    $column: 100% / $columns;
    $gap: $percent-gap/2;
  }

  @if $return == all          { @return $columns $column $gap; }
  @else if $return == column  { @return $column; }
  @else if $return == gap     { @return $gap; }
  @else if $return == columns { @return $columns; }
}
