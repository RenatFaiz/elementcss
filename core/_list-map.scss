// _list-map.scss provides functions for working with SASS lists and maps.

// indexes
// returns new list with indexes of $list-1 values that exists in $list-2.
//    indexes(a b c d, c g f a) -> 3 1
//    indexes(1 2 3 4, 2 1 4 3) -> 2 1 4
@function indexes($list-1, $list-2, $mode:normal) {
  $res: ();
  @if $mode == normal {
    @each $val-2 in $list-2 {
      $i: index($list-1, $val-2);
      @if $i {
        $res: append($res, $i);
      }
    }
  } @else {
    @each $val-2 in $list-2 {
      @if index($list-1, $val-2) == null {
        $res: append($res, index($list-2, $val-2));
      }
    }
  }
  @return $res;
}

// nths
// returns new list with items from $list by $indexes.
//    nths(a b c d, 3 1)        -> c a
//    nths(alisa bob mark, 1 2) -> alisa bob
@function nths($list, $indexes) {
  $res: ();
  @each $i in $indexes {
    @if $i {
      $res: append($res, nth($list, $i));
    }
  }
  @return $res;
}

// slice
// returns new list with items from $list splitted by $start and $end indexes.
//    slice(a b c d, 3, 4)      -> c d
//    slice(alisa bob mark, 2)  -> bob mark
@function slice($list, $start, $end:null) {
  $res: ();
  $end: if($end == null, length($list), $end);
  @for $i from 1 through length($list) {
    @if $i >= $start and $i <= $end {
      $res: append($res, nth($list, $i));
    }
  }
  @return $res;
}

// merge
// returns new list with items from $list-2 merged into $list-1 withoud duplication.
//    merge(a b c, a z c)         -> a b c z
//    merge(a b c, a z c, comma)  -> a, b, c, z
//    merge(a b c, a a z z c c)   -> a b c z z
@function merge($list-1, $list-2, $separator:auto) {
  $i-2: indexes($list-1, $list-2, reverse);
  @return join($list-1, nths($list-2, $i-2), $separator);
}

// value-remove
// returns new list without an item removed by $val name.
//    value-remove(a b c d, c)        -> a b d
//    value-remove(a b c d, a, comma) -> b, c, d
//    value-remove(1 3 4 7, 2, comma) -> 1, 3, 4, 7
@function value-remove($list, $val:null, $separator:auto) {
  $res: ();
  @each $val-1 in $list {
    @if $val-1 != $val {
      $res: append($res, $val-1, $separator);
    }
  }
  @return $res;
}

// nth-remove
// returns new list without an items removed by $index.
//    nth-remove(1 2 3 4, 1, comma) -> 2, 3, 4
//    nth-remove(a b c d, 2)        -> a c d
@function nth-remove($list, $index:null, $separator:auto) {
  $res: ();
  @if type-of($index) == number {
    @for $i from 1 through length($list) {
      @if $i != $index {
        $res: append($res, nth($list, $i), $separator);
      }
    }
    @return $res;
  } @else {
    @return $list;
  }
}

// map-append-val
// returns new map with appended $val by $key for a given $map. If $key exists appends
// to existing values, if doesn't return map with new $key containing $val.
//    map-append-val((a:1, b:2, c:3), b, 4 5 6, comma)  -> (a: 1, b: (2, 4 5 6), c: 3)
//    map-append-val((a:1, b:2, c:3), c, 10)            -> (a: 1, b: 2, c: 3 10)
//    map-append-val((a:1, b:2), c, 10)                 -> (a: 1, b: 2, c: 10)
@function map-append-val($map, $key, $val, $separator:auto) {
  $vals: map-get($map, $key);
  $res: (
    $key: if($vals!=null, append($vals, $val, $separator), append((), $val, $separator)),
    //$key: append($vals, $val, $separator),
  );
  @return map-merge($map, $res);
}

// map-union
// returns new map merging key and values from $map2 into $map1. If $map2 has the same
// keys as in $map1 function appends the values to existing ones in $map1. If $map1
// doesn't have these keys function creates new ones and merge.
//    map-union((a:1, b:2, c:3), (a:10, b:5, f:35)) -> (a: 1 10, b: 2 5, c: 3, f: null 35)
//    map-union((c:1 2, b:3 4), (a:foo, b:5, f:9))  -> (c: 1 2, b: 3 4 5, a: foo, f: null 9)
@function map-union($map1, $map2) {
  @if length($map1) == 0 {
    @return $map2;
  }
  @each $key, $val in $map2 {
    @if map-has-key($map1, $key) {
      $_: ($key: join(map-get($map1, $key), $val));
      $map1: map-merge($map1, $_);
    } @else {
      //$map1: map-merge($map1, ($key: append((), $val)));
      $map1: map-merge($map1, ($key: $val));
    }
  }
  @return $map1;
}
